
 - Алгоритм кеширования - Least Frequently Used (LFU):
     LFU подсчитывает как часто используется элемент.
     Те элементы, обращения к которым происходят реже всего, вытесняются в первую очередь.
     Каждый элемент имеет счётчик обращений. Новый элемент вставляется в кэш со значением счётчика равным 1.
     При попадании в кэш счётчик найденного элемента увеличивается на 1.
     Если нужно освободить место, нужно найти элемент с самым маленьким значением счётчика.
     Таким образом вытесняется тот элемент, которые запрашивался реже всего.
     Главный недостаток LFU состоит в том, что некогда частотные элементы могут присутствовать в кэше очень долго,
     даже если они уже давно не запрашивались.

 - Ограничения:
    -- формат хранения ключ/значение
    -- кешировать "простые" структуры
    -- заданный объём ram-кеша, в количестве структур
    -- заданный объём drive-кеша, в количестве структур
    -- файл с кешем хранить в той же директории, где и программа
    -- время жизни в кеше неограничено - вытестнять новыми данными
    -- вывод графика по тезультатам работы в JPG файл


 - Алгоритм тестирования кеша:
    -- тестирование кеша в памяти:
        --- размера кеша равен нулю - ожидаемый результат: большое время отклика (отдавать данные с задержкой?)
        --- размер данных меньше размера кеша - ожидаемый результат: после заполнения кеша время отклика уменьшается
        --- размер данных больше размера кеша - ожидаемый результат: после заполнения кеша время отклика больше чем
                                                при размере данных меньшем, чем размера кеша

    -- тестирование кеша на диске:
        --- размер данных больше размера кеша в памяти, но меньше обшего размера (и память, и диск) кеша -
                    ожидаемый результат: после заполнения кеша время отклика меньше чем совсем без кеша
        --- протестировать междууровневую границу - данных меньше границы, данных больше границы и сравнить время


 - Двухуровневый кеш:
    -- реализует интерфейс Cache
    -- содержит счётчик количества запросов к кэшу после последнего рекэширования
    -- кешируемые элементы добавляются только в ram-часть
    -- поиск, извлечение и удаление кешируемых элементов производится в обеих частях кеша
    -- параметры кеша:
        --- количество записей в ram-части
        --- количество записей в drive-части
        --- минимальная частота нахождения элемента в RAM-кеше:
            ---- если меньше или равно, то переносить в Drive-кеш при рекешировании
            ---- если больше, то переносить из Drive-кеша в Ram-кеш
        --- минимальная частота нахождения элемента в двух кешах:
            ---- если меньше или равно, то удалять из кешей
        --- максимальное значение счётка количества ненахождений в кеше

    -- рекеширование
        -- критерии рекеширования:
            --- RAM-часть кеша полность заполнилась
            --- количество ненахождений в кеше больше заданного
            --- ??? счётчик кешируемых элементов превышает количество записей в ram-части
            --- ??? после заполнени двух частей кеша - вытеснение редко вызываемых элементов с частотой менее минимально заданной


==========
Предстоит:


 - рекеширование
 - образцы разных графиков
 - видеоролики с работой тестового примера и графиком

==========
Готово:

- совместный кеш ram+drive

- кеш на диске:
    -- метод Put
    -- метод Get
    -- метод Del
    -- метод IsExist
    -- метод Size


- вывод графика по тезультатам работы в JPG файл

- кеш в памяти:
    -- метод Put
    -- метод Get
    -- метод Del
    -- метод IsExist
    -- метод Size



